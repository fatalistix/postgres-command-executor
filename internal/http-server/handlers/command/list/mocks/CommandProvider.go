// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	models "github.com/fatalistix/postgres-command-executor/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// CommandProvider is an autogenerated mock type for the CommandProvider type
type CommandProvider struct {
	mock.Mock
}

// Commands provides a mock function with given fields:
func (_m *CommandProvider) Commands() ([]models.Command, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commands")
	}

	var r0 []models.Command
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Command, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Command)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommandProvider creates a new instance of CommandProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandProvider {
	mock := &CommandProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
